// <auto-generated />
using System;
using ERSZ.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ERSZ.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220309141334_Useralter")]
    partial class Useralter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Common.MongoFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_wrt");

                    b.Property<string>("FileId")
                        .HasColumnType("text")
                        .HasColumnName("file_id");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<int>("FileSize")
                        .HasColumnType("integer")
                        .HasColumnName("file_size");

                    b.Property<int?>("FileTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("file_type_id");

                    b.Property<string>("SourceId")
                        .HasColumnType("text")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnType("integer")
                        .HasColumnName("source_type");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_mongo_file");

                    b.HasIndex("FileTypeId")
                        .HasDatabaseName("ix_mongo_file_file_type_id");

                    b.ToTable("mongo_file", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_education");

                    b.ToTable("nom_education", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomEducationRang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_education_rang");

                    b.ToTable("nom_education_rang", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomFileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int>("SourceType")
                        .HasColumnType("integer")
                        .HasColumnName("source_type");

                    b.HasKey("Id")
                        .HasName("pk_nom_file_type");

                    b.ToTable("nom_file_type", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomMandateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_mandate_type");

                    b.ToTable("nom_mandate_type", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_speciality");

                    b.ToTable("nom_speciality", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Register.Juror", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AddressCityId")
                        .HasColumnType("integer")
                        .HasColumnName("address_city_id");

                    b.Property<string>("AddressText")
                        .HasColumnType("text")
                        .HasColumnName("address_text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_wrt");

                    b.Property<int>("EducationId")
                        .HasColumnType("integer")
                        .HasColumnName("education_id");

                    b.Property<int>("EducationRangId")
                        .HasColumnType("integer")
                        .HasColumnName("education_rang_id");

                    b.Property<string>("Family2Name")
                        .HasColumnType("text")
                        .HasColumnName("family2name");

                    b.Property<string>("FamilyName")
                        .HasColumnType("text")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Uic")
                        .HasColumnType("text")
                        .HasColumnName("uic");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_jurors");

                    b.HasIndex("AddressCityId")
                        .HasDatabaseName("ix_jurors_address_city_id");

                    b.HasIndex("EducationId")
                        .HasDatabaseName("ix_jurors_education_id");

                    b.HasIndex("EducationRangId")
                        .HasDatabaseName("ix_jurors_education_rang_id");

                    b.ToTable("jurors", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Register.JurorMandate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_wrt");

                    b.Property<string>("JurorId")
                        .HasColumnType("text")
                        .HasColumnName("juror_id");

                    b.Property<int>("MandateTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("mandate_type_id");

                    b.Property<int?>("RegisterCourtId")
                        .HasColumnType("integer")
                        .HasColumnName("register_court_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_juror_mandate");

                    b.HasIndex("CourtId")
                        .HasDatabaseName("ix_juror_mandate_court_id");

                    b.HasIndex("JurorId")
                        .HasDatabaseName("ix_juror_mandate_juror_id");

                    b.HasIndex("MandateTypeId")
                        .HasDatabaseName("ix_juror_mandate_mandate_type_id");

                    b.HasIndex("RegisterCourtId")
                        .HasDatabaseName("ix_juror_mandate_register_court_id");

                    b.ToTable("juror_mandate", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Register.JurorSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_wrt");

                    b.Property<string>("JurorId")
                        .HasColumnType("text")
                        .HasColumnName("juror_id");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("integer")
                        .HasColumnName("speciality_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_juror_speciality");

                    b.HasIndex("JurorId")
                        .HasDatabaseName("ix_juror_speciality_juror_id");

                    b.HasIndex("SpecialityId")
                        .HasDatabaseName("ix_juror_speciality_speciality_id");

                    b.ToTable("juror_speciality", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Common.CommonCourt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApealRegionId")
                        .HasColumnType("integer")
                        .HasColumnName("apeal_region_id");

                    b.Property<string>("CityCode")
                        .HasColumnType("text")
                        .HasColumnName("city_code");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("CourtTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("court_type_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Latitude")
                        .HasColumnType("text")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("text")
                        .HasColumnName("longitude");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("object_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("ParentObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_object_id");

                    b.HasKey("Id")
                        .HasName("pk_common_court");

                    b.HasIndex("ApealRegionId")
                        .HasDatabaseName("ix_common_court_apeal_region_id");

                    b.HasIndex("CourtTypeId")
                        .HasDatabaseName("ix_common_court_court_type_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_common_court_parent_id");

                    b.ToTable("common_court", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Common.CommonCourtEkatte", b =>
                {
                    b.Property<int>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<int>("EkEkatteId")
                        .HasColumnType("integer")
                        .HasColumnName("ek_ekatte_id");

                    b.HasKey("CourtId", "EkEkatteId")
                        .HasName("pk_common_court_ekatte");

                    b.HasIndex("EkEkatteId")
                        .HasDatabaseName("ix_common_court_ekatte_ek_ekatte_id");

                    b.ToTable("common_court_ekatte", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Ekatte.EkCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("EISPPCode")
                        .HasColumnType("text")
                        .HasColumnName("eispp_code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("CountryId")
                        .HasName("pk_ek_country");

                    b.ToTable("ek_country", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Ekatte.EkDistrict", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DistrictId"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Oblast")
                        .HasColumnType("text")
                        .HasColumnName("oblast");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.HasKey("DistrictId")
                        .HasName("pk_ek_district");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_ek_district_country_id");

                    b.ToTable("ek_district", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Ekatte.EkEkatte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<string>("Altitude")
                        .HasColumnType("text")
                        .HasColumnName("altitude");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("EisppCode")
                        .HasColumnType("text")
                        .HasColumnName("eispp_code");

                    b.Property<string>("Ekatte")
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Kind")
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.Property<string>("Kmetstvo")
                        .HasColumnType("text")
                        .HasColumnName("kmetstvo");

                    b.Property<string>("Lat")
                        .HasColumnType("text")
                        .HasColumnName("lat");

                    b.Property<string>("Lon")
                        .HasColumnType("text")
                        .HasColumnName("lon");

                    b.Property<int?>("MunicipalId")
                        .HasColumnType("integer")
                        .HasColumnName("municipal_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Oblast")
                        .HasColumnType("text")
                        .HasColumnName("oblast");

                    b.Property<string>("Obstina")
                        .HasColumnType("text")
                        .HasColumnName("obstina");

                    b.Property<string>("TVM")
                        .HasColumnType("text")
                        .HasColumnName("tvm");

                    b.Property<string>("Tsb")
                        .HasColumnType("text")
                        .HasColumnName("tsb");

                    b.HasKey("Id")
                        .HasName("pk_ek_ekatte");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_ek_ekatte_country_id");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_ek_ekatte_district_id");

                    b.HasIndex("MunicipalId")
                        .HasDatabaseName("ix_ek_ekatte_municipal_id");

                    b.ToTable("ek_ekatte", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Ekatte.EkMunincipality", b =>
                {
                    b.Property<int>("MunicipalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("municipality_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MunicipalityId"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Municipality")
                        .HasColumnType("text")
                        .HasColumnName("municipality");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("MunicipalityId")
                        .HasName("pk_ek_munincipality");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_ek_munincipality_district_id");

                    b.ToTable("ek_munincipality", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_identity_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("identity_roles", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_identity_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_identity_role_claims_role_id");

                    b.ToTable("identity_role_claims", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<int?>("CourtId")
                        .HasMaxLength(256)
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<bool>("MustChangePassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("must_change_password");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UIC")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("uic");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_identity_users");

                    b.HasIndex("CourtId")
                        .HasDatabaseName("ix_identity_users_court_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.ToTable("identity_users", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_identity_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_identity_user_claims_user_id");

                    b.ToTable("identity_user_claims", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("ProviderKey", "LoginProvider")
                        .HasName("pk_identity_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_identity_user_logins_user_id");

                    b.ToTable("identity_user_logins", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_identity_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_identity_user_roles_role_id");

                    b.ToTable("identity_user_roles", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_identity_user_tokens");

                    b.ToTable("identity_user_tokens", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomApealRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApealRegionType")
                        .HasColumnType("integer")
                        .HasColumnName("apeal_region_type");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_apeal_region");

                    b.ToTable("nom_apeal_region", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomCourtType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_court_type");

                    b.ToTable("nom_court_type", (string)null);
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Common.MongoFile", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomFileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("fk_mongo_file_nom_file_type_file_type_id");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Register.Juror", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Ekatte.EkEkatte", "AddressCity")
                        .WithMany()
                        .HasForeignKey("AddressCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_jurors_ek_ekatte_address_city_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomEducation", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_jurors_nom_education_education_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomEducationRang", "EducationRang")
                        .WithMany()
                        .HasForeignKey("EducationRangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_jurors_nom_education_rang_education_rang_id");

                    b.Navigation("AddressCity");

                    b.Navigation("Education");

                    b.Navigation("EducationRang");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Register.JurorMandate", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Common.CommonCourt", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_juror_mandate_common_court_court_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Register.Juror", "Juror")
                        .WithMany("Mandates")
                        .HasForeignKey("JurorId")
                        .HasConstraintName("fk_juror_mandate_jurors_juror_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomMandateType", "MandateType")
                        .WithMany()
                        .HasForeignKey("MandateTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_juror_mandate_nom_mandate_type_mandate_type_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Common.CommonCourt", "RegisterCourt")
                        .WithMany()
                        .HasForeignKey("RegisterCourtId")
                        .HasConstraintName("fk_juror_mandate_common_court_register_court_id");

                    b.Navigation("Court");

                    b.Navigation("Juror");

                    b.Navigation("MandateType");

                    b.Navigation("RegisterCourt");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Register.JurorSpeciality", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Register.Juror", "Juror")
                        .WithMany("Specialities")
                        .HasForeignKey("JurorId")
                        .HasConstraintName("fk_juror_speciality_jurors_juror_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomSpeciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_juror_speciality_nom_speciality_speciality_id");

                    b.Navigation("Juror");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Common.CommonCourt", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomApealRegion", "ApealRegion")
                        .WithMany()
                        .HasForeignKey("ApealRegionId")
                        .HasConstraintName("fk_common_court_nom_apeal_region_apeal_region_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Nomenclatures.NomCourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_court_nom_court_type_court_type_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Common.CommonCourt", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_common_court_common_court_parent_id");

                    b.Navigation("ApealRegion");

                    b.Navigation("CourtType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Common.CommonCourtEkatte", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Common.CommonCourt", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_court_ekatte_common_court_court_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Ekatte.EkEkatte", "Ekatte")
                        .WithMany()
                        .HasForeignKey("EkEkatteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_court_ekatte_ek_ekatte_ek_ekatte_id");

                    b.Navigation("Court");

                    b.Navigation("Ekatte");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Ekatte.EkDistrict", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Ekatte.EkCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ek_district_ek_country_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Ekatte.EkEkatte", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Ekatte.EkCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ek_ekatte_ek_country_country_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Ekatte.EkDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_ek_ekatte_ek_district_district_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Ekatte.EkMunincipality", "Munincipality")
                        .WithMany()
                        .HasForeignKey("MunicipalId")
                        .HasConstraintName("fk_ek_ekatte_ek_munincipality_municipal_id");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Munincipality");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Ekatte.EkMunincipality", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Ekatte.EkDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_ek_munincipality_ek_district_district_id");

                    b.Navigation("District");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_role_claims_identity_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Common.CommonCourt", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .HasConstraintName("fk_identity_users_common_court_court_id");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_user_claims_identity_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_user_logins_identity_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_user_roles_identity_roles_role_id");

                    b.HasOne("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_user_roles_identity_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_user_tokens_identity_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Register.Juror", b =>
                {
                    b.Navigation("Mandates");

                    b.Navigation("Specialities");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ERSZ.Infrastructure.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
